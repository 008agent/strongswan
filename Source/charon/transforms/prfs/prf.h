/**
 * @file prf.h
 * 
 * @brief Generic interface for pseudo-random-functions
 * 
 */

/*
 * Copyright (C) 2005 Jan Hutter, Martin Willi
 * Hochschule fuer Technik Rapperswil
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.  See <http://www.fsf.org/copyleft/gpl.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 */

#ifndef PRF_H_
#define PRF_H_

#include <encoding/payloads/transform_substructure.h>


/**
 * Object representing a diffie hellman exchange
 */
typedef struct prf_s prf_t;

struct prf_s {
	/**
	 * @brief generates pseudo random bytes and writes them
	 * in the buffer
	 * 
	 * @param this			calling prf
	 * @param seed			a chunk containing the seed for the next bytes
	 * @param [out]buffer	pointer where the generated bytes will be written
	 * @return				
	 * 						- SUCCESS in any case
	 */
	status_t (*get_bytes) (prf_t *this, chunk_t seed, u_int8_t *buffer);
	
	/**
	 * @brief generates pseudo random bytes and allocate space for them
	 * 
	 * @param this			calling prf
	 * @param seed			a chunk containing the seed for the next bytes
	 * @param [out]chunk	chunk which will hold generated bytes
	 * @return				
	 * 						- SUCCESS in any case
	 * 						- OUT_OF_RES if space could not be allocated
	 */
	status_t (*allocate_bytes) (prf_t *this, chunk_t seed, chunk_t *chunk);
	
	/**
	 * @brief get the block size of this prf
	 * 
	 * @param this			calling prf
	 * @return				block size in bytes
	 */
	size_t (*get_block_size) (prf_t *this);
	
	/**
	 * @brief Set the key for this prf
	 * 
	 * @param this			calling prf
	 * @return				block size in bytes
	 */
	status_t (*set_key) (prf_t *this, chunk_t key);
	
	/**
	 * @brief Destroys a prf object.
	 *
	 * @param this 	prf_t object to destroy
	 * @return 		
	 * 				SUCCESS in any case
	 */
	status_t (*destroy) (prf_t *this);
};

/**
 * Creates a new prf_t object
 * 
 * @param pseudo_random_function	Algorithm to use
 * @return
 * 									- prf_t if successfully
 * 									- NULL if out of ressources or prf not supported
 */
prf_t *prf_create(pseudo_random_function_t pseudo_random_function);

#endif /*PRF_H_*/
