/**
 * @file hmac.h
 * 
 * @brief Interface of hmac_t.
 */

/*
 * Copyright (C) 2005 Jan Hutter, Martin Willi
 * Hochschule fuer Technik Rapperswil
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.  See <http://www.fsf.org/copyleft/gpl.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 */

#ifndef HMAC_H_
#define HMAC_H_

#include <transforms/hashers/hasher.h>
#include <definitions.h>


typedef struct hmac_t hmac_t;

/**
 * @brief Message authentication using hash functions.
 * 
 * This class implements the message authenticaion algorithm
 * described in RFC2104. It uses a hash function, wich must
 * be implemented as a hasher_t class.
 * 
 * @see http://www.faqs.org/rfcs/rfc2104.html
 * @see hasher_t, prf_hmac_t
 * 
 * @ingroup transforms
 */
struct hmac_t {
	/**
	 * @brief Generate message authentication code.
	 * 
	 * If buffer is NULL, no result is given back. A next call will
	 * append the data to already supplied. If buffer is not NULL, 
	 * the mac of all apended data is calculated, returned and the
	 * state of the hmac_t reset;
	 * 
	 * @param this			calling hmac
	 * @param data			chunk of data to authenticate
	 * @param [out]buffer	pointer where the generated bytes will be written
	 * @return				
	 * 						- SUCCESS in any case
	 */
	status_t (*get_mac) (hmac_t *this, chunk_t data, u_int8_t *buffer);
	
	/**
	 * @brief Generates message authentication code and 
	 * allocate space for them.
	 * 
	 * If chunk is NULL, no result is given back. A next call will
	 * append the data to already supplied. If chunk is not NULL, 
	 * the mac of all apended data is calculated, returned and the
	 * state of the hmac_t reset;
	 * 
	 * @param this			calling hmac
	 * @param data			chunk of data to authenticate
	 * @param [out]chunk	chunk which will hold generated bytes
	 * @return				
	 * 						- SUCCESS, or
	 * 						- OUT_OF_RES if space could not be allocated
	 */
	status_t (*allocate_mac) (hmac_t *this, chunk_t data, chunk_t *chunk);
	
	/**
	 * @brief Get the block size of this hmac.
	 * 
	 * @param this			calling hmac
	 * @return				block size in bytes
	 */
	size_t (*get_block_size) (hmac_t *this);	
	
	/**
	 * @brief Set the key for this hmac.
	 * 
	 * Any key length is accepted.
	 * 
	 * @param this			calling hmac
	 * @param key			key to set
	 * @return				
	 * 						- SUCCESS in any case
	 */
	status_t (*set_key) (hmac_t *this, chunk_t key);
	
	/**
	 * @brief Destroys a hmac object.
	 *
	 * @param this 			hmac_t object to destroy
	 * @return
	 * 						- SUCCESS in any case
	 */
	status_t (*destroy) (hmac_t *this);
};

/**
 * @brief Creates a new hmac_t object.
 * 
 * Creates a new hmac_t object using hash_algorithm to
 * create a hasher_t internally.
 * 
 * @param hash_algorithm		hash algorithm to use
 * @return
 *								- hmac_t if successfully
 *								- NULL if out of ressources or hash not supported
 * 
 * @ingroup transforms
 */
hmac_t *hmac_create(hash_algorithm_t hash_algorithm);


#endif /*HMAC_H_*/
