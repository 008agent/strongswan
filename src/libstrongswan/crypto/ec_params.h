/*
 * Copyright (C) 2013 Tobias Brunner
 * Hochschule fuer Technik Rapperswil
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.  See <http://www.fsf.org/copyleft/gpl.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 */

/**
 * @defgroup ec_params ec_params
 * @{ @ingroup crypto
 */

#ifndef EC_PARAMS_H_
#define EC_PARAMS_H_

typedef enum ec_curve_t ec_curve_t;
typedef struct ec_params_t ec_params_t;

#include <crypto/diffie_hellman.h>

/**
 * Currently supported ECC curves
 */
enum ec_curve_t {
	ECC_UNKNOWN,
	/* NIST 192-bit curve (e.g. RFC 5114), X9.62 prime192v1, SECP secp192r1 */
	ECC_NIST_192,
	/* NIST 224-bit curve (e.g. RFC 5114), SECP secp224r1 */
	ECC_NIST_224,
	/* NIST 256-bit curve (e.g. RFC 5114), X9.62 prime256v1, SECP secp256r1 */
	ECC_NIST_256,
	/* NIST 384-bit curve (e.g. RFC 5114), SECP secp384r1 */
	ECC_NIST_384,
	/* NIST 521-bit curve (e.g. RFC 5114), SECP secp521r1 */
	ECC_NIST_521,
	/* ECC Brainpool 224-bit curve (RFC 5639), brainpoolP224r1 */
	ECC_BP_224,
	/* ECC Brainpool 256-bit curve (RFC 5639), brainpoolP256r1 */
	ECC_BP_256,
	/* ECC Brainpool 384-bit curve (RFC 5639), brainpoolP384r1 */
	ECC_BP_384,
	/* ECC Brainpool 512-bit curve (RFC 5639), brainpoolP512r1 */
	ECC_BP_512,
};

/**
 * Parameters for a specific ECC curve.
 *
 * All currently supported curves have a cofactor h of 1.
 */
struct ec_params_t {

	/**
	 * The prime p specifying the base field
	 */
	const chunk_t p;

	/**
	 * Coefficient a of the elliptic curve E: y^2 = x^3 + ax + b (mod p)
	 */
	const chunk_t a;

	/**
	 * Coefficient b
	 */
	const chunk_t b;

	/**
	 * x coordinate of base point G (a point in E of prime order)
	 */
	const chunk_t x;

	/**
	 * y coordinate of base point G
	 */
	const chunk_t y;

	/**
	 * Prime order q of the group generated by G
	 */
	const chunk_t q;
};

/**
 * Get the curve identifier for the given OID.
 *
 * @param oid			curve OID
 * @return				curve or ECC_UNKNOWN
 */
ec_curve_t ec_curve_from_oid(int oid);

/**
 * Get the curve identifier for the specified DH group.
 *
 * @param group			DH group
 * @return				curve or ECC_UNKNOWN
 */
ec_curve_t ec_curve_for_dh(diffie_hellman_group_t group);

/**
 * Get the parameters associated with the specified curve.
 *
 * @param curve			ECC curve
 * @return				The parameters or NULL
 */
ec_params_t *ec_get_params(ec_curve_t curve);

#endif /** EC_PARAMS_H_ @}*/
